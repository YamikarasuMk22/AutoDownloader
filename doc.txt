
[やること]
	・格パラメータが空白の場合の表示(Artist = "未登録" 等)
	・データベースのソースを2,3個サンプリングする。
	・FC2のログイン、記事投稿、画像投稿画面のソースをサンプリングする。
	・タグのトランスレーション
	・textDBのデザイン
	・ダウンローダーとアップローダーは分ける？
	・イメージのURLは可変数字部分を変数(@@等)として処理するか？

タグで検索
↓
ページ数を解析
↓
ページ内の作品URL解析
↓
URLリストを作成
↓
URLリスト順に則りアクセス
↓
画像数を解析
↓
画像URL解析?
↓
画像を全てダウンロード
↓
mkdir、画像にネーミングする？
↓
DBの作品マスター、作品タグマスター、作品詳細マスターにデータ登録?

	マスターレイアウト
	作品マスター
		作品ID,タイトル(Law),[サイトから取得可能なパラメータ等],ページ数,[閲覧回数いいね回数等],[日時ログ]
	作品タグマスター
		作品ID,タグ
	作品詳細マスター
		作品ID,

作品情報からhtml作成
↓
WebDriverでFC2に接続
↓
htmlアップロード
↓
画像アップロード


<main>

//プロファイル生成
FirefoxProfile profile = new FirefoxProfile();

//ダウンロードファイルの保存先指定　0:デスクトップ 1：ダウンロードフォルダ 2:ダウンロードに指定された最後のフォルダ
profile.setPreference("browser.download.folderList", 0);

//ダウンロードファイルの保存先が指定済みならその設定を有効にする
profile.setPreference("browser.download.useDownloadDir", true);

//指定したMIMEタイプ(ここではzip形式)は確認ダイアログ無しで強制ダウンロードする
profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/zip;");

//設定したプロファイルでドライバを生成
FirefoxDriver wd = new FirefoxDriver(profile);

＜MIMEタイプの例＞
テキスト(.txt)･･･"text/plain"
PDF(.pdf)･･･"application/pdf"
PNG画像(.png)･･･"image/png"

public static void processDownload(String url, int pageNum) {
		Util.systemLoger("Start Process [Download]-----");
		Util.systemLoger("[Download] URL:" + url + "X/");
		Util.systemLoger("[Download] PageSize:" + pageNum);

		//driver.get("https://nhentai.net/g/196078/2/");
		driver.get("https://i.nhentai.net/galleries/1067090/2.jpg");
		//driver.navigate().to("https://nhentai.net/g/196078/2/");
		//driver.navigate().to("https://i.nhentai.net/galleries/1067090/2.jpg");

		//new Actions(driver).contextClick(driver.findElement(
		//		By.xpath("//div[@id='page-container']/section[@id='image-container']/a/img"))).build().perform();
		new Actions(driver).contextClick().build().perform();
		//driver.findElement(By.className("fit-horizontal")).sendKeys(Keys.CONTROL + "s");
		//new Actions(driver).sendKeys(Keys.CONTROL + "s");
		//new Actions(driver).sendKeys("a");

		try {
			Robot robot = new Robot();

			robot.delay(1000);
//			robot.keyPress(KeyEvent.VK_CONTROL);
//			robot.keyPress(KeyEvent.VK_S);
//			robot.keyRelease(KeyEvent.VK_S);
//			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_A);
			robot.keyRelease(KeyEvent.VK_A);
			robot.delay(1000);
			robot.keyPress(KeyEvent.VK_ENTER);
			robot.keyRelease(KeyEvent.VK_ENTER);
			robot.keyPress(KeyEvent.VK_ENTER);
			robot.keyRelease(KeyEvent.VK_ENTER);
			robot.delay(1000);
		} catch (AWTException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}
	}
